// Code generated by Prisma (prisma@1.26.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  woman: (where?: WomanWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  woman: (where: WomanWhereUniqueInput) => WomanPromise;
  women: (args?: {
    where?: WomanWhereInput;
    orderBy?: WomanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Woman>;
  womenConnection: (args?: {
    where?: WomanWhereInput;
    orderBy?: WomanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WomanConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createWoman: (data: WomanCreateInput) => WomanPromise;
  updateWoman: (args: {
    data: WomanUpdateInput;
    where: WomanWhereUniqueInput;
  }) => WomanPromise;
  updateManyWomen: (args: {
    data: WomanUpdateManyMutationInput;
    where?: WomanWhereInput;
  }) => BatchPayloadPromise;
  upsertWoman: (args: {
    where: WomanWhereUniqueInput;
    create: WomanCreateInput;
    update: WomanUpdateInput;
  }) => WomanPromise;
  deleteWoman: (where: WomanWhereUniqueInput) => WomanPromise;
  deleteManyWomen: (where?: WomanWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  woman: (
    where?: WomanSubscriptionWhereInput
  ) => WomanSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type WomanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface WomanCreateInput {
  name: String;
  slug: String;
}

export interface WomanUpdateInput {
  name?: String;
  slug?: String;
}

export interface WomanWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: WomanWhereInput[] | WomanWhereInput;
  OR?: WomanWhereInput[] | WomanWhereInput;
  NOT?: WomanWhereInput[] | WomanWhereInput;
}

export interface WomanUpdateManyMutationInput {
  name?: String;
  slug?: String;
}

export interface WomanSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WomanWhereInput;
  AND?: WomanSubscriptionWhereInput[] | WomanSubscriptionWhereInput;
  OR?: WomanSubscriptionWhereInput[] | WomanSubscriptionWhereInput;
  NOT?: WomanSubscriptionWhereInput[] | WomanSubscriptionWhereInput;
}

export type WomanWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface WomanEdge {
  node: Woman;
  cursor: String;
}

export interface WomanEdgePromise extends Promise<WomanEdge>, Fragmentable {
  node: <T = WomanPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WomanEdgeSubscription
  extends Promise<AsyncIterator<WomanEdge>>,
    Fragmentable {
  node: <T = WomanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Woman {
  id: ID_Output;
  name: String;
  slug: String;
  createdAt: DateTimeOutput;
}

export interface WomanPromise extends Promise<Woman>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WomanSubscription
  extends Promise<AsyncIterator<Woman>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WomanSubscriptionPayload {
  mutation: MutationType;
  node: Woman;
  updatedFields: String[];
  previousValues: WomanPreviousValues;
}

export interface WomanSubscriptionPayloadPromise
  extends Promise<WomanSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WomanPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WomanPreviousValuesPromise>() => T;
}

export interface WomanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WomanSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WomanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WomanPreviousValuesSubscription>() => T;
}

export interface WomanConnection {
  pageInfo: PageInfo;
  edges: WomanEdge[];
}

export interface WomanConnectionPromise
  extends Promise<WomanConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WomanEdge>>() => T;
  aggregate: <T = AggregateWomanPromise>() => T;
}

export interface WomanConnectionSubscription
  extends Promise<AsyncIterator<WomanConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WomanEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWomanSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWoman {
  count: Int;
}

export interface AggregateWomanPromise
  extends Promise<AggregateWoman>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWomanSubscription
  extends Promise<AsyncIterator<AggregateWoman>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WomanPreviousValues {
  id: ID_Output;
  name: String;
  slug: String;
  createdAt: DateTimeOutput;
}

export interface WomanPreviousValuesPromise
  extends Promise<WomanPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WomanPreviousValuesSubscription
  extends Promise<AsyncIterator<WomanPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Woman",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
